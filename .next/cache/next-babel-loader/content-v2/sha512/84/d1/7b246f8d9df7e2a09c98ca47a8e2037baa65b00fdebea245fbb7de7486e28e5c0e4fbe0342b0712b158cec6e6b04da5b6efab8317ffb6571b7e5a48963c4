{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/zubenko/code/projects/React/WESBOS/Advanced-React-master 2/sick-fits/frontend/components/UpdateProduct.js\";\nimport { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nconst SINGLE_PRODUCT_QUERY = gql`\n  query SINGLE_PRODUCT_QUERY($id: ID!) {\n    Product(where: { id: $id }) {\n      id\n      name\n      description\n      price\n    }\n  }\n`;\nexport default function UpdateProduct({\n  id\n}) {\n  // 1. get existing product\n  const {\n    data,\n    error,\n    loading\n  } = useQuery(SINGLE_PRODUCT_QUERY, {\n    variables: {\n      id\n    }\n  });\n  console.log(data); // 2. get mutation to updat the product\n  // 3. form to handle the updates\n\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Update! \", id]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 10\n  }, this);\n}","map":{"version":3,"sources":["/Users/zubenko/code/projects/React/WESBOS/Advanced-React-master 2/sick-fits/frontend/components/UpdateProduct.js"],"names":["useQuery","gql","SINGLE_PRODUCT_QUERY","UpdateProduct","id","data","error","loading","variables","console","log"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,gBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,MAAMC,oBAAoB,GAAGD,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATA;AAWA,eAAe,SAASE,aAAT,CAAuB;AAAEC,EAAAA;AAAF,CAAvB,EAA+B;AAC5C;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAA2BP,QAAQ,CAACE,oBAAD,EAAuB;AAC9DM,IAAAA,SAAS,EAAE;AAAEJ,MAAAA;AAAF;AADmD,GAAvB,CAAzC;AAIAK,EAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ,EAN4C,CAO5C;AACA;;AACA,sBAAO;AAAA,2BAAYD,EAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD","sourcesContent":["import { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\n\nconst SINGLE_PRODUCT_QUERY = gql`\n  query SINGLE_PRODUCT_QUERY($id: ID!) {\n    Product(where: { id: $id }) {\n      id\n      name\n      description\n      price\n    }\n  }\n`;\n\nexport default function UpdateProduct({ id }) {\n  // 1. get existing product\n  const { data, error, loading } = useQuery(SINGLE_PRODUCT_QUERY, {\n    variables: { id },\n  });\n\n  console.log(data);\n  // 2. get mutation to updat the product\n  // 3. form to handle the updates\n  return <p>Update! {id}</p>;\n}\n"]},"metadata":{},"sourceType":"module"}