{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nexport default function useForm(initial = {}) {\n  // create a state object for input\n  const {\n    0: inputs,\n    1: setInputs\n  } = useState(initial);\n\n  function handleChange(e) {\n    let {\n      value,\n      name,\n      type\n    } = e.target;\n\n    if (type === 'number') {\n      value = parseInt(value);\n    }\n\n    if (type === 'file') {\n      value[0] = e.target.value;\n    }\n\n    setInputs(_objectSpread(_objectSpread({}, inputs), {}, {\n      [name]: value\n    }));\n  }\n\n  function resetForm() {\n    setInputs(initial);\n  }\n\n  function clearForm() {\n    const blankState = Object.fromEntries(Object.entries(inputs).map(([key, value]) => ['key', '']));\n  } // return the things we want to surface from the custom hook\n\n\n  return {\n    inputs,\n    handleChange,\n    resetForm,\n    clearForm\n  };\n}","map":{"version":3,"sources":["/Users/zubenko/code/projects/React/WESBOS/Advanced-React-master 2/sick-fits/frontend/lib/useForm.js"],"names":["useState","useForm","initial","inputs","setInputs","handleChange","e","value","name","type","target","parseInt","resetForm","clearForm","blankState","Object","fromEntries","entries","map","key"],"mappings":";;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,eAAe,SAASC,OAAT,CAAiBC,OAAO,GAAG,EAA3B,EAA+B;AAC5C;AACA,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBJ,QAAQ,CAACE,OAAD,CAApC;;AAEA,WAASG,YAAT,CAAsBC,CAAtB,EAAyB;AACvB,QAAI;AAAEC,MAAAA,KAAF;AAASC,MAAAA,IAAT;AAAeC,MAAAA;AAAf,QAAwBH,CAAC,CAACI,MAA9B;;AACA,QAAID,IAAI,KAAK,QAAb,EAAuB;AACrBF,MAAAA,KAAK,GAAGI,QAAQ,CAACJ,KAAD,CAAhB;AACD;;AACD,QAAIE,IAAI,KAAK,MAAb,EAAqB;AACnBF,MAAAA,KAAK,CAAC,CAAD,CAAL,GAAWD,CAAC,CAACI,MAAF,CAASH,KAApB;AACD;;AACDH,IAAAA,SAAS,iCAEJD,MAFI;AAGP,OAACK,IAAD,GAAQD;AAHD,OAAT;AAKD;;AAED,WAASK,SAAT,GAAqB;AACnBR,IAAAA,SAAS,CAACF,OAAD,CAAT;AACD;;AAED,WAASW,SAAT,GAAqB;AACnB,UAAMC,UAAU,GAAGC,MAAM,CAACC,WAAP,CACjBD,MAAM,CAACE,OAAP,CAAed,MAAf,EAAuBe,GAAvB,CAA2B,CAAC,CAACC,GAAD,EAAMZ,KAAN,CAAD,KAAkB,CAAC,KAAD,EAAQ,EAAR,CAA7C,CADiB,CAAnB;AAGD,GA3B2C,CA6B5C;;;AACA,SAAO;AACLJ,IAAAA,MADK;AAELE,IAAAA,YAFK;AAGLO,IAAAA,SAHK;AAILC,IAAAA;AAJK,GAAP;AAMD","sourcesContent":["import { useState } from 'react';\n\nexport default function useForm(initial = {}) {\n  // create a state object for input\n  const [inputs, setInputs] = useState(initial);\n\n  function handleChange(e) {\n    let { value, name, type } = e.target;\n    if (type === 'number') {\n      value = parseInt(value);\n    }\n    if (type === 'file') {\n      value[0] = e.target.value;\n    }\n    setInputs({\n      // copy the existing state\n      ...inputs,\n      [name]: value,\n    });\n  }\n\n  function resetForm() {\n    setInputs(initial);\n  }\n\n  function clearForm() {\n    const blankState = Object.fromEntries(\n      Object.entries(inputs).map(([key, value]) => ['key', ''])\n    );\n  }\n\n  // return the things we want to surface from the custom hook\n  return {\n    inputs,\n    handleChange,\n    resetForm,\n    clearForm,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}