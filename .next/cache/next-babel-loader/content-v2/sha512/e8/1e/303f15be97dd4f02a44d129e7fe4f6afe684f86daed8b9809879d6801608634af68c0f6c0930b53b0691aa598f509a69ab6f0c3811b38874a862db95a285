{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/zubenko/code/projects/React/WESBOS/Advanced-React-master 2/sick-fits/frontend/components/SignUp.js\";\nimport gql from 'graphql-tag';\nimport { useMutation } from '@apollo/client';\nimport Form from './styles/Form';\nimport useForm from '../lib/useForm';\nimport { CURRENT_USER_QUERY } from './User';\nimport Error from './ErrorMessage';\nconst SIGNUP_MUTATION = gql`\n  mutation SIGNUP_MUTATION($email: String!, $password: String!) {\n    authenticateUserWithPassword(email: $email, password: $password) {\n      ... on UserAuthenticationWithPasswordSuccess {\n        item {\n          id\n          email\n          name\n        }\n      }\n      ... on UserAuthenticationWithPasswordFailure {\n        code\n        message\n      }\n    }\n  }\n`;\nexport default function SignUp() {\n  const {\n    inputs,\n    handleChange,\n    resetForm\n  } = useForm({\n    email: '',\n    name: '',\n    password: ''\n  });\n  const [signin, {\n    data,\n    loading\n  }] = useMutation(SIGNIN_MUTATION, {\n    variables: inputs,\n    // Refetch currently logged in user\n    refetchQueries: [{\n      query: CURRENT_USER_QUERY\n    }]\n  });\n\n  async function handleSubmit(e) {\n    e.preventDefault(); // stop the form from submitting\n\n    console.log(inputs);\n    const res = await signin();\n    console.log(res);\n    resetForm(); // send the email and password to graphql api\n  }\n\n  const error = (data === null || data === void 0 ? void 0 : data.authenticateUserWithPassword.__typename) === 'UserAuthenticationWithPasswordFailure' ? data === null || data === void 0 ? void 0 : data.authenticateUserWithPassword : undefined;\n  return /*#__PURE__*/_jsxDEV(Form, {\n    method: \"POST\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Sign In Into Your Account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Error, {\n      error: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: [\"Email\", ' ', /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          name: \"email\",\n          placeholder: \"You Email Address\",\n          autoComplete: \"email\",\n          value: inputs.email,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"password\",\n        children: [\"Password\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          name: \"password\",\n          placeholder: \"Password\",\n          autoComplete: \"password\",\n          value: inputs.password,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \" Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Users/zubenko/code/projects/React/WESBOS/Advanced-React-master 2/sick-fits/frontend/components/SignUp.js"],"names":["gql","useMutation","Form","useForm","CURRENT_USER_QUERY","Error","SIGNUP_MUTATION","SignUp","inputs","handleChange","resetForm","email","name","password","signin","data","loading","SIGNIN_MUTATION","variables","refetchQueries","query","handleSubmit","e","preventDefault","console","log","res","error","authenticateUserWithPassword","__typename","undefined"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,OAAOC,IAAP,MAAiB,eAAjB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,SAASC,kBAAT,QAAmC,QAAnC;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AAEA,MAAMC,eAAe,GAAGN,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAhBA;AAkBA,eAAe,SAASO,MAAT,GAAkB;AAC/B,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,YAAV;AAAwBC,IAAAA;AAAxB,MAAsCP,OAAO,CAAC;AAClDQ,IAAAA,KAAK,EAAE,EAD2C;AAElDC,IAAAA,IAAI,EAAE,EAF4C;AAGlDC,IAAAA,QAAQ,EAAE;AAHwC,GAAD,CAAnD;AAKA,QAAM,CAACC,MAAD,EAAS;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAT,IAA8Bf,WAAW,CAACgB,eAAD,EAAkB;AAC/DC,IAAAA,SAAS,EAAEV,MADoD;AAE/D;AACAW,IAAAA,cAAc,EAAE,CAAC;AAAEC,MAAAA,KAAK,EAAEhB;AAAT,KAAD;AAH+C,GAAlB,CAA/C;;AAKA,iBAAeiB,YAAf,CAA4BC,CAA5B,EAA+B;AAC7BA,IAAAA,CAAC,CAACC,cAAF,GAD6B,CACT;;AACpBC,IAAAA,OAAO,CAACC,GAAR,CAAYjB,MAAZ;AACA,UAAMkB,GAAG,GAAG,MAAMZ,MAAM,EAAxB;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AACAhB,IAAAA,SAAS,GALoB,CAM7B;AACD;;AACD,QAAMiB,KAAK,GACT,CAAAZ,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEa,4BAAN,CAAmCC,UAAnC,MACA,uCADA,GAEId,IAFJ,aAEIA,IAFJ,uBAEIA,IAAI,CAAEa,4BAFV,GAGIE,SAJN;AAMA,sBACE,QAAC,IAAD;AAAM,IAAA,MAAM,EAAC,MAAb;AAAoB,IAAA,QAAQ,EAAET,YAA9B;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,KAAD;AAAO,MAAA,KAAK,EAAEM;AAAd;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,OAAf;AAAA,4BACQ,GADR,eAEE;AACE,UAAA,IAAI,EAAC,OADP;AAEE,UAAA,IAAI,EAAC,OAFP;AAGE,UAAA,WAAW,EAAC,mBAHd;AAIE,UAAA,YAAY,EAAC,OAJf;AAKE,UAAA,KAAK,EAAEnB,MAAM,CAACG,KALhB;AAME,UAAA,QAAQ,EAAEF;AANZ;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAYE;AAAO,QAAA,OAAO,EAAC,UAAf;AAAA,4CAEE;AACE,UAAA,IAAI,EAAC,UADP;AAEE,UAAA,IAAI,EAAC,UAFP;AAGE,UAAA,WAAW,EAAC,UAHd;AAIE,UAAA,YAAY,EAAC,UAJf;AAKE,UAAA,KAAK,EAAED,MAAM,CAACK,QALhB;AAME,UAAA,QAAQ,EAAEJ;AANZ;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAZF,eAuBE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAvBF;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA+BD","sourcesContent":["import gql from 'graphql-tag';\nimport { useMutation } from '@apollo/client';\nimport Form from './styles/Form';\nimport useForm from '../lib/useForm';\nimport { CURRENT_USER_QUERY } from './User';\nimport Error from './ErrorMessage';\n\nconst SIGNUP_MUTATION = gql`\n  mutation SIGNUP_MUTATION($email: String!, $password: String!) {\n    authenticateUserWithPassword(email: $email, password: $password) {\n      ... on UserAuthenticationWithPasswordSuccess {\n        item {\n          id\n          email\n          name\n        }\n      }\n      ... on UserAuthenticationWithPasswordFailure {\n        code\n        message\n      }\n    }\n  }\n`;\n\nexport default function SignUp() {\n  const { inputs, handleChange, resetForm } = useForm({\n    email: '',\n    name: '',\n    password: '',\n  });\n  const [signin, { data, loading }] = useMutation(SIGNIN_MUTATION, {\n    variables: inputs,\n    // Refetch currently logged in user\n    refetchQueries: [{ query: CURRENT_USER_QUERY }],\n  });\n  async function handleSubmit(e) {\n    e.preventDefault(); // stop the form from submitting\n    console.log(inputs);\n    const res = await signin();\n    console.log(res);\n    resetForm();\n    // send the email and password to graphql api\n  }\n  const error =\n    data?.authenticateUserWithPassword.__typename ===\n    'UserAuthenticationWithPasswordFailure'\n      ? data?.authenticateUserWithPassword\n      : undefined;\n\n  return (\n    <Form method='POST' onSubmit={handleSubmit}>\n      <h2>Sign In Into Your Account</h2>\n      <Error error={error} />\n      <fieldset>\n        <label htmlFor='email'>\n          Email{' '}\n          <input\n            type='email'\n            name='email'\n            placeholder='You Email Address'\n            autoComplete='email'\n            value={inputs.email}\n            onChange={handleChange}\n          />\n        </label>\n        <label htmlFor='password'>\n          Password\n          <input\n            type='password'\n            name='password'\n            placeholder='Password'\n            autoComplete='password'\n            value={inputs.password}\n            onChange={handleChange}\n          />\n        </label>\n        <button type='submit'> Submit</button>\n      </fieldset>\n    </Form>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}